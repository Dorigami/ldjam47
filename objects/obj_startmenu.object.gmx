<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize start menu
randomize();
var i = 0;

menu_options[0] = "New Game";
menu_options[1] = "Exit";
//menu_options[2] = "Sandbox";

btn_width = 120;
btn_height = 30;
btn_xo = 0.5 * (room_width - btn_width);
btn_yo = 0.5 * (room_height - btn_height);

txt_color_normal = c_white;
txt_color_highlight = c_yellow;

click_index = -1;

//calculate vertices for the buttons
//[x1,y1,x2,y2,txt_color]
btn_grid = ds_grid_create(5, 2);
for(i=0;i&lt;ds_grid_height(btn_grid); i++)
{
    btn_grid[# 0, i] = btn_xo;
    btn_grid[# 1, i] = btn_yo + i*(btn_height+5); // the +5 is for spacing
    btn_grid[# 2, i] = btn_xo + btn_width;
    btn_grid[# 3, i] = btn_grid[# 1, i] + btn_height;
    btn_grid[# 4, i] = txt_color_normal;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Start Menu
var i = 0;
var on_btn = false;
for(i=0; i&lt;ds_grid_height(btn_grid); i++)
{
    if(point_in_rectangle(mouse_x, mouse_y, btn_grid[# 0, i], btn_grid[# 1, i], btn_grid[# 2, i], btn_grid[# 3, i]))
    {
        btn_grid[# 4, i] = txt_color_highlight;
        on_btn = true;
        //register a click
        if(mouse_check_button(mb_left))
        {
            click_index = i;
        }
    } else {
        btn_grid[# 4, i] = txt_color_normal;
    }
}

if(!on_btn) click_index = -1;

if(mouse_check_button_released(mb_left))
{
    i = click_index;
    click_index = -1
    switch(i)
    {
        case -1:
            //nothing
            break;
        case 0:
            //new game
            with(instance_create(0,0, obj_fade)) new_room = rm_corridor;
            //room_goto(rm_corridor);
            break;
        case 1:
            //Exit
            game_end();
            break;
/*
        case 2:
            //Sandbox
            room_goto(rm_sandbox);
            break;
*/        
    
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Menu Elements
var i = 0;

draw_sprite(spr_title_banner, 0, (room_width-sprite_get_width(spr_title_banner))/2, 60);
draw_set_font(font1);
draw_set_color(c_black);
var str = "TIME CRYSTAL";
draw_text((room_width-string_width(str))/2, 80, str);
draw_set_font(font2);
draw_set_color(c_white);
for(i=0; i&lt;ds_grid_height(btn_grid); i++)
{
    if(click_index = i)
    {
        draw_roundrect_colour(btn_grid[# 0, i], btn_grid[# 1, i], btn_grid[# 2, i], btn_grid[# 3, i], c_ltgray, c_ltgray, false);   
    } else {
        draw_roundrect_colour(btn_grid[# 0, i], btn_grid[# 1, i], btn_grid[# 2, i], btn_grid[# 3, i], c_dkgray, c_dkgray, false);   
    }
    
    draw_text_colour(btn_grid[# 0, i]+6, btn_grid[# 1, i]+6, menu_options[i],btn_grid[# 4, i],btn_grid[# 4, i],btn_grid[# 4, i],btn_grid[# 4, i],1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
