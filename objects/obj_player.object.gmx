<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_lifeform_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init player
phy_fixed_rotation = true;
obj_view.following = id;

//game variables
global.loop = 0;

// state machine
state = IDLE;
state_init = true;
state_script[IDLE] = scr_player_state_idle;
state_script[MOVE] = scr_player_state_move;
state_script[ATTACK] = scr_player_state_attack;
state_script[HURT] = scr_player_state_hurt;
state_script[DEAD] = scr_player_state_dead;
state_script[DASH] = scr_player_state_dash;

// movement &amp; facing
move_axis = 0;
face = 0;
spd = 6;
dash_len = 0;
cinematic = false;
cine_spd = 0.4*spd;
y_offset = 0;

// health and damage taken
damage_taken = 0;
hp_max = 100;
hp = hp_max;
stam_max = 100;
stam = 90;
mana_max = 100;
mana = 90;
essence_max = 100;
essence = 0;

// attacking &amp; damage
attacked = false;
attack = atk.melee;
damage = 10;
knockback = 50;
enum weapon
{
    nothing,
    sword,
    staff,
    total
}
enum atk
{
    melee,
    block,
    banish,
    nova
}
has_sword = true;
has_staff = false;
equipped = weapon.sword;

// sprite table
sprites[IDLE, FACE_UR] = spr_player_idle;
sprites[IDLE, FACE_R] = spr_player_idle;
sprites[IDLE, FACE_LR] = spr_player_idle;
sprites[IDLE, FACE_UL] = spr_player_idle;
sprites[IDLE, FACE_L] = spr_player_idle;
sprites[IDLE, FACE_LL] = spr_player_idle;

sprites[MOVE, FACE_UR] = spr_player_move_right;
sprites[MOVE, FACE_R] = spr_player_move_right;
sprites[MOVE, FACE_LR] = spr_player_move_right;
sprites[MOVE, FACE_UL] = spr_player_move_left;
sprites[MOVE, FACE_L] = spr_player_move_left;
sprites[MOVE, FACE_LL] = spr_player_move_left;

sprites[ATTACK, FACE_UR] = spr_player_attack_right;
sprites[ATTACK, FACE_R] = spr_player_attack_right;
sprites[ATTACK, FACE_LR] = spr_player_attack_right;
sprites[ATTACK, FACE_UL] = spr_player_attack_left;
sprites[ATTACK, FACE_L] = spr_player_attack_left;
sprites[ATTACK, FACE_LL] = spr_player_attack_left;

sprites[HURT, FACE_UR] = spr_player_hurt_right; 
sprites[HURT, FACE_R] = spr_player_hurt_right;
sprites[HURT, FACE_LR] = spr_player_hurt_right;
sprites[HURT, FACE_UL] = spr_player_hurt_left;
sprites[HURT, FACE_L] = spr_player_hurt_left;
sprites[HURT, FACE_LL] = spr_player_hurt_left;

sprites[DEAD, FACE_UR] = spr_player_dead;
sprites[DEAD, FACE_R] = spr_player_dead;
sprites[DEAD, FACE_LR] = spr_player_dead;
sprites[DEAD, FACE_UL] = spr_player_dead;
sprites[DEAD, FACE_L] = spr_player_dead;
sprites[DEAD, FACE_LL] = spr_player_dead;

sprites[DASH, FACE_UR] = spr_player_dash_right;
sprites[DASH, FACE_R] = spr_player_dash_right;
sprites[DASH, FACE_LR] = spr_player_dash_right;
sprites[DASH, FACE_UL] = spr_player_dash_left;
sprites[DASH, FACE_L] = spr_player_dash_left;
sprites[DASH, FACE_LL] = spr_player_dash_left;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// death loop
with(instance_create(0,0, obj_fade)) new_room = rm_corridor;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// attack cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dash cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// dash duration
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// idle reset
if(state != DEAD)
{
    state = IDLE;
    state_init = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control player
event_inherited();

//cinematic enterance
if(cinematic)
{
    y_offset = clamp(y_offset - cine_spd, 0, 300);
    if(y_offset = 0)
    {
        cinematic = false;
    }
} else {
    scr_player_input();
    
    if(inp_startmenu) 
    {
        instance_deactivate_all(false);
        room_goto(rm_startmenu);
    }
    
    //player regen
    stam = clamp(stam + (0.05*stam_max)/room_speed, 0, stam_max);
    mana = clamp(mana + (0.05*mana_max)/room_speed, 0, mana_max);
    
    // run current state
    sprite_index = sprites[state, face];
    script_execute(state_script[state]);
}
//stat caps
if(hp &gt;= hp_max) hp = hp_max;
if(stam &gt;= stam_max) stam = stam_max;
if(mana &gt;= mana_max) mana = mana_max;
if(essence &gt;= essence_max) essence = essence_max;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calcel dashing
if(alarm_get(1) &gt; -1) alarm_set(1, -1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_room_transition">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// go through the door
if(room_exists(other.new_room))
{
    room_goto(other.new_room);
    x = other.new_x;
    y = other.new_y;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control anim endings

if(state = DEAD) global.loop++;

// end attack state
if(state = ATTACK) 
{
    alarm_set(3, 0.2*room_speed);
    attacked = false;
    state_init = true;
    state = IDLE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_fixed_rotation = true;
if(room = rm_corridor)
{
    instance_activate_object(obj_player);
    cinematic = true;
    phy_position_x = 384;
    phy_position_y = 640;
    y_offset = 70;
    image_speed = 0.2;
    hp = hp_max;
    state_init = true;
    state = IDLE;
    sprite_index = spr_player_entering;
}
if(room = rm_victorymenu)
{
    obj_player.persistent = false;
    instance_deactivate_object(obj_player);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw HUD
var xo = 24;
var yo = 8;
var width = 371;
var height = 15;
//health
draw_rectangle_colour(xo,yo, xo+width, yo+height,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(xo,yo, xo+width*(hp/hp_max), yo+height,c_red,c_red,c_red,c_red,false);
//stamina
yo += 26; 
draw_rectangle_colour(xo,yo, xo+width, yo+height,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(xo,yo, xo+width*(stam/stam_max), yo+height,c_green,c_green,c_green,c_green,false);
//mana
yo += 26; 
if(essence &gt;= essence_max) draw_rectangle_colour(xo,yo-4, xo+width+4, yo+height+4,c_aqua,c_aqua,c_aqua,c_aqua,false);
draw_rectangle_colour(xo,yo, xo+width, yo+height,c_black,c_black,c_black,c_black,false);
draw_rectangle_colour(xo,yo, xo+width*(mana/mana_max), yo+height,c_blue,c_blue,c_blue,c_blue,false);
//essence
draw_rectangle_colour(xo,yo+0.8*height, xo+width*(essence/essence_max), yo+height,c_aqua,c_aqua,c_aqua,c_aqua,false);
//HUD
draw_sprite_ext(spr_hud, 0, 0, 0, 2, 2, 0, c_white, 1);





switch(equipped)
{
    case weapon.sword:
        draw_sprite_ext(spr_hud_sword, 0, 0, 0, 2, 2, 0, c_white, 1);
        break;
    case weapon.staff:
        draw_sprite_ext(spr_hud_staff, 0, 0, 0, 2, 2, 0, c_white, 1);
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw player
if(!cinematic)
{
    draw_self();
} else {
    draw_sprite_ext(sprite_index, image_index, x, y + y_offset, 1, 1, 0, c_white, 1);
}

//draw_text(x, y-30, "move_axis = " + string(move_axis) + "#state = " + string(state) + "#vel: [ "+ string(phy_linear_velocity_x) +" "+ string(phy_linear_velocity_y) +" ]");
var width = 200;
var height = 200;



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,22</point>
    <point>8,16</point>
  </PhysicsShapePoints>
</object>
